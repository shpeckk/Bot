from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from flask import Flask
from threading import Thread
import asyncio

import os

API_TOKEN = os.getenv('API_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Flask keep_alive
app = Flask('')


@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


def run():
    app.run(host='0.0.0.0', port=8080)


def keep_alive():
    t = Thread(target=run)
    t.start()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderHookah(StatesGroup):
    base = State()
    strength = State()
    addon = State()
    flavor = State()
    phone = State()
    comment = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start', 'menu'], state='*')
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω", "–ú–µ–Ω—é –∏ —Ü–µ–Ω—ã")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –ú–µ–Ω—é
@dp.message_handler(lambda m: m.text == "–ú–µ–Ω—é –∏ —Ü–µ–Ω—ã", state='*')
async def send_menu(message: types.Message):
    with open("menu.jpg", "rb") as photo:
        await message.answer_photo(photo, caption="–ù–∞—à–µ –º–µ–Ω—é –∏ —Ü–µ–Ω—ã:")


# –ó–∞–∫–∞–∑ ‚Äî —à–∞–≥ 1
@dp.message_handler(lambda m: m.text == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω", state='*')
async def order_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–∞ —á–∞—à–µ (3000‚ÇΩ)", "–û—Ç–º–µ–Ω–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤—É:", reply_markup=keyboard)
    await OrderHookah.base.set()


@dp.message_handler(lambda m: m.text == "–û—Ç–º–µ–Ω–∞", state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)


# –ö—Ä–µ–ø–æ—Å—Ç—å
@dp.message_handler(state=OrderHookah.base)
async def choose_strength(message: types.Message, state: FSMContext):
    await state.update_data(base=message.text, price=3000)
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10:")
    await OrderHookah.strength.set()


# –î–æ–±–∞–≤–∫–∏
@dp.message_handler(state=OrderHookah.strength)
async def choose_addon(message: types.Message, state: FSMContext):
    await state.update_data(strength=message.text)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ú–æ–ª–æ–∫–æ (+200)", "–í–∏–Ω–æ (+400)", "–ê–±—Å–µ–Ω—Ç (+500)", "–ë–µ–∑ –¥–æ–±–∞–≤–∫–∏", "–û—Ç–º–µ–Ω–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É (–º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–∞):", reply_markup=keyboard)
    await OrderHookah.addon.set()


# –í–∫—É—Å—ã
@dp.message_handler(state=OrderHookah.addon)
async def choose_flavor(message: types.Message, state: FSMContext):
    addon_text = message.text
    addon_price = 0

    if "–ú–æ–ª–æ–∫–æ" in addon_text:
        addon_price = 200
    elif "–í–∏–Ω–æ" in addon_text:
        addon_price = 400
    elif "–ê–±—Å–µ–Ω—Ç" in addon_text:
        addon_price = 500

    await state.update_data(addon=addon_text, addon_price=addon_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:")
    await OrderHookah.flavor.set()


# –¢–µ–ª–µ—Ñ–æ–Ω
@dp.message_handler(state=OrderHookah.flavor)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(flavor=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp):")
    await OrderHookah.phone.set()


# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@dp.message_handler(state=OrderHookah.phone)
async def ask_comment(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await OrderHookah.comment.set()


# –§–∏–Ω–∞–ª
@dp.message_handler(state=OrderHookah.comment)
async def finish_order(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()

    total = data['price'] + data['addon_price']
    summary = (
        f"‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!*\n\n"
        f"–û—Å–Ω–æ–≤–∞: {data['base']}\n"
        f"–ö—Ä–µ–ø–æ—Å—Ç—å: {data['strength']}/10\n"
        f"–î–æ–±–∞–≤–∫–∞: {data['addon']}\n"
        f"–í–∫—É—Å: {data['flavor']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω (WhatsApp): {data['phone']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment'] or '‚Äî'}\n\n"
        f"üí∞ *–ò—Ç–æ–≥–æ: {total} ‚ÇΩ*\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –Ω–∞–ª–∏—á–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥\n"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer(summary, parse_mode='Markdown', reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –≤ –≥—Ä—É–ø–ø—É
    confirm_markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
    )

    username = message.from_user.username or "–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
    order_msg = await bot.send_message(
        ADMIN_CHAT_ID,
        f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{username}:\n\n{summary}",
        parse_mode='Markdown',
        reply_markup=confirm_markup
    )

    await state.update_data(user_id=message.from_user.id, admin_msg_id=order_msg.message_id)

    # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
    await asyncio.sleep(3600)
    await bot.send_message(message.from_user.id, "üìù –ö–∞–∫ –≤–∞–º –Ω–∞—à –∫–∞–ª—å—è–Ω? –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
@dp.callback_query_handler(lambda c: c.data in ["confirm_order", "cancel_order"])
async def handle_order_decision(callback_query: types.CallbackQuery):
    message = callback_query.message
    user_id = callback_query.from_user.id

    if callback_query.data == "confirm_order":
        await message.edit_reply_markup()
        await bot.send_message(message.chat.id, "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")
    else:
        await message.edit_reply_markup()
        await bot.send_message(message.chat.id, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
        await bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")


if __name__ == '__main__':
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
